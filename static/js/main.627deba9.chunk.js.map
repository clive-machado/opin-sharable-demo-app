{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["opin","window","OPiN","envData","setLocale","App","useState","loader","setLoader","partners","setPartners","signInTranslations","setSignInTranslations","className","hasLoggedInPartner","size","type","onClick","logout","then","parterData","data","logo","login_redirect","partner_configuration_name","partner_type","width","src","placeholder","getName","executeWorkflow","renderSignInBox","detectPartners","catch","err","styleObj","color","map","partner","style","getConfigurationUid","partnerList","id","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAcIA,G,YAAO,IAAIC,OAAOC,KARR,CACZ,gBAAoB,CAAC,uBACrB,QAAY,wCAOVC,EAAQ,CACV,YAAe,MAEjBH,EAAKI,UAAU,SAKf,IAyJeC,EAzJH,WAAO,IAAD,EACWC,oBAAS,GADpB,mBACVC,EADU,KACFC,EADE,OAEeF,mBAAS,IAFxB,mBAEVG,EAFU,KAEAC,EAFA,OAGmCJ,mBAAS,MAH5C,mBAGVK,EAHU,KAGUC,EAHV,KAsIjB,OACC,sBAAKC,UAAU,MAAf,UAAqB,uBAElBb,EAAKc,qBAAuBP,EAAS,cAAC,IAAD,CAAMQ,KAAK,UAvElD,qCACC,0DACA,cAAC,IAAD,CACCC,KAAK,UACLC,QAAS,kBAzBZT,GAAU,GACHR,EAAKkB,SACXC,MAAK,WACLP,EAAsB,MACtBF,EAAY,IACZF,GAAU,OAkBT,uBAsEA,8BAEEG,EA3DmB,WACvB,IAAMS,EAAaT,EAAmBU,KAC9BC,EAAmEF,EAAnEE,KAAkCC,GAAiCH,EAA7DI,2BAA6DJ,EAAjCG,gBAAiCH,EAAjBK,aAC1D,OACC,qCACC,cAAC,IAAD,CACCC,MAAO,IACPC,IAAKL,EACLM,YACC,cAAC,IAAD,CAAMb,KAAK,YAGb,+BAAMJ,EAAmBkB,UAAzB,MAA0CN,EAAiB,qBAAuB,iBAClF,cAAC,IAAD,CACCP,KAAK,UACLC,QAAS,WAAoBN,EA1DtBmB,gBADW,kBAyDnB,iCA8CuBC,GACrB,qCACC,cAAC,IAAD,CAAQd,QAAS,kBArItBT,GAAU,QAERR,EAAKgC,eAAe7B,GACpBgB,MAAK,SAACV,GAENC,EAAYD,GACZD,GAAU,MAGTyB,OAAM,SAACC,QA4HL,4BAA+D,uBAAK,uBACnE3B,EAAS,cAAC,IAAD,CAAMQ,KAAK,UApCN,WACpB,IAAMoB,EAAW,CAChBC,MAAQ,QAEP,OACI,8BACD3B,EAAS4B,KAAK,SAAAC,GACd,OACC,gCACC,qBAAIC,MAAOJ,EAAX,UAAuBG,EAAQT,UAA/B,MAAgDS,EAAQjB,KAAKE,eAAiB,qBAAuB,iBACrG,cAAC,IAAD,CACCP,KAAK,UACLC,QAAS,kBAAIL,EAAsB0B,IAFpC,sBAKS,uBAAK,yBAPLA,EAAQE,4BA4BeC,QAKtC,qBAAKC,GAAG,eAAeH,MAAO,CAACI,OAAO,WC/J1BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.627deba9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Image, Button, Modal, Spin } from 'antd';\nimport ReactJson from 'react-json-view';\nimport './App.css';\n\n// 1. SET OPIN CONFIGURATION\nvar options = {\n  'mediaProperties' : ['blt5de182c7688d8331'],\n  \"baseURL\" : \"https://dev-nba-api-cdn.opin.media\"\n};\n\n// 2. INTIALIZE WITH OPiN constructor.\n// Note: \"window\" keyword is needed only for react app\n// var opin = new OPiN(options) for vanilla javascript\nvar opin = new window.OPiN(options)\nvar envData={\n  'countryCode': 'IN'   //filter Partner based on Country\n}\nopin.setLocale('en-US') //sets Translation Language\n\n/**\n * Main APP Function\n */\nconst App = () => {\n\tconst [loader, setLoader] = useState(false);\n\tconst [partners, setPartners] = useState([]);\n\tconst [signInTranslations, setSignInTranslations] = useState(null)\n\t\n  /*\n   * Detect Partner function Executed\n   */\n  const detectPartner = () => {\n\t\tsetLoader(true)\n    // 3. Gets the list of partners\n    opin.detectPartners(envData)\n\t\t\t.then((partners) => {\n        // use the partners list to display in UI\n\t\t\t\tsetPartners(partners);\n\t\t\t\tsetLoader(false);\n    \t\t// access partner data from partners[0].data\n\t\t\t\t// or use various methods provided by the SDK\n\t\t}).catch((err) => {\n  \t\t// error while detecting partners\n\t\t})\n\t}\n\t\n\t/**\n\t * syncTranslations function Executed \n\t * @param {*} partner - This is a partner instance\n\t * @param {Object} tags - This is the translation tag object \n\t */\n\tconst syncTranslations = (partner, tags) => {\n\t\treturn partner.syncTranslations(tags)\n\t}\n\n\t/**\n\t * execute Work Flow function Executed\n\t * @param {*} partner - This is a partner instance\n\t */\n  const executeWorkflow = (partner) => {\n    var dom_selector = '#opin-wrapper'\n    partner.executeWorkflow(dom_selector);\n\t}\n\n\t/**\n\t * Logout user\n\t */\n\tconst logout = () => {\n\t\tsetLoader(true)\n\t\treturn opin.logout()\n\t\t.then(() =>{\n\t\t\tsetSignInTranslations(null)\n\t\t\tsetPartners([])\n\t\t\tsetLoader(false)\n\t\t})\n\t}\n\t\n\t/**\n\t * Gets logged in partner\n\t */\n\tconst getLoggedInPartner = () => {\n\t\treturn opin.getLoggedInPartner()\n\t}\n\n\t/**\n\t * renders Logged in partner\n\t */\n\tconst renderLoggedInPartner = () => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>Welcome you're logged In </p>\n\t\t\t\t<Button \n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tonClick={()=>logout()}\n\t\t\t\t>\n\t\t\t\t\tLogout\n\t\t\t\t</Button>\n\t\t\t</>\n\t\t)\n\t}\n\n\t/**\n\t * renders the sign in box\n\t */\n\tconst renderSignInBox = () => {\n\t\tconst parterData = signInTranslations.data\n\t\tconst { logo, partner_configuration_name, login_redirect, partner_type } = parterData\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Image\n\t\t\t\t\twidth={200}\n\t\t\t\t\tsrc={logo}\n\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t<Spin size=\"large\" />\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<h2>{ signInTranslations.getName() } - {( login_redirect ? \"Redirect Full Page\" : \"Same Window\" )}</h2>\n\t\t\t\t<Button \n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tonClick={()=>executeWorkflow(signInTranslations)}\n\t\t\t\t>\n\t\t\t\t\tExecute Workflow\n\t\t\t\t</Button>\n\t\t\t</>\n\t\t)\n\t}\n\n  /*\n   * Parter List Display\n   */\n  const partnerList = ()=> {\n\t\tconst styleObj = {\n\t\t\tcolor : \"blue\"\n\t\t}\n    return (\n        <div>\n\t\t\t\t\t{ partners.map( partner => {\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={partner.getConfigurationUid()}>\n\t\t\t\t\t\t\t\t\t<h2 style={styleObj}>{ partner.getName() } - {( partner.data.login_redirect ? \"Redirect Full Page\" : \"Same Window\" )}</h2>\n\t\t\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\t\t\t\tonClick={()=>setSignInTranslations(partner)}\n\t\t\t\t\t\t\t\t\t>\t\n\t\t\t\t\t\t\t\t\t\t\tActivate\n\t\t\t\t\t\t\t\t\t</Button><br/><br/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n        </div>\n    )\n\t}\n\t\n\t/**\n\t * Main render function\n\t */\n\treturn (\n\t\t<div className=\"App\"><br/>\n\t\t\t{/* Checks if a partner is already logged in */}\n\t\t\t{ opin.hasLoggedInPartner() ? loader ? <Spin size=\"large\" /> : renderLoggedInPartner() : (\n\t\t\t\t<div>\n\t\t\t\t\t{/* Checks if the user has clicked on any partner then renders the sign in box for the partner or else renders the list of partners */}\t\t\n\t\t\t\t\t{signInTranslations ? renderSignInBox() : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Button onClick={() => detectPartner()}>Detect Partner</Button><br/><br/>\n\t\t\t\t\t\t\t{loader ? <Spin size=\"large\" /> : partnerList()}\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div id=\"opin-wrapper\" style={{height:300}} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}